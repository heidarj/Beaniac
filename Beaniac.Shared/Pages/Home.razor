@page "/"
@inject RestService RestService

<PageTitle>Home</PageTitle>

<FluentPullToRefresh Direction="@PullDirection.Down"
                     OnRefreshAsync="OnRefreshAsync"
                     ShowStaticTip="false">
    <PullingTemplate>
        Pull to refresh
    </PullingTemplate>
    <ReleaseTemplate>
        Release to update
    </ReleaseTemplate>
    <CompletedTemplate>
        Update completed
    </CompletedTemplate>

    <ChildContent>
        <FluentGrid Justify="JustifyContent.FlexStart" Spacing="2">
            <FluentGridItem xs="12" sm="6" md="3" lg="2">
                <AddCard Href="/coffee/add" />
            </FluentGridItem>
        @foreach (var coffee in Coffees){
            <FluentGridItem xs="12" sm="6" md="3" lg="2">
                <CoffeeCard coffee=coffee ></CoffeeCard>
            </FluentGridItem>
        }
        @if(Coffees is null or {Count: 0}){
            <FluentGridItem sm="6" md="9" lg="10">
                <FluentCard >
                    <h4>Welcome to Beaniac</h4>
                    <p>Get started by adding your first beans <span class="theme-fill"><FluentEmoji Value="@(new Emojis.FoodDrink.HighContrast.Default.Beans())" part="icon-rest" Width="24"/></span></p>
                </FluentCard>
            </FluentGridItem>
        }
        </FluentGrid>
    </ChildContent>
</FluentPullToRefresh>

@code {
    private List<Coffee> Coffees = new List<Coffee>();

    protected override async Task OnInitializedAsync()
    {
        var CoffeeResult = await RestService.GetAsync<Coffee>();
        Coffees = CoffeeResult?.Items ?? new List<Coffee>();
    }

    async Task<bool> OnRefreshAsync()
    {
        var CoffeeResult = await RestService.GetAsync<Coffee>();
        Coffees = CoffeeResult?.Items ?? new List<Coffee>();
        await Task.Delay(500);
        return true;
    }
}
